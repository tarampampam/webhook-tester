# Online editor: <https://editor.swagger.io/>
openapi: 3.0.1 # Docs: <https://swagger.io/docs/specification/2-0/basic-structure/>

info:
  title: WebHook Tester
  description: A simple web app to test webhooks
  version: 0.1.0
  contact: {name: tarampampam, url: 'https://github.com/tarampampam'}

tags:
  - name: api
  - name: websocket
  - name: health
  - name: metrics
  - name: webhook

servers:
  - url: /
    description: Current server

paths:
  /api/version:
    get:
      tags: [api]
      summary: Get application version
      description: Returns the application version
      operationId: apiAppVersion
      responses:
        "200": {$ref: '#/components/responses/AppVersion'}

  /api/settings:
    get:
      tags: [api]
      summary: Get application settings
      description: Returns the application settings
      operationId: apiSettings
      responses:
        "200": {$ref: '#/components/responses/AppSettings'}

  /api/session:
    post:
      tags: [api]
      summary: Create new session
      description: Creates new session
      operationId: apiSessionCreate
      requestBody: {$ref: '#/components/requestBodies/NewSession'}
      responses:
        "200": {$ref: '#/components/responses/SessionOptions'}
        "400": {$ref: '#/components/responses/BadRequest'}
        "5XX": {$ref: '#/components/responses/ServerError'}

  /api/session/{session_uuid}:
    delete:
      tags: [api]
      summary: Delete session with passed UUID
      description: Deletes session with passed UUID
      operationId: apiSessionDelete
      parameters: [{$ref: '#/components/parameters/SessionUUID'}]
      responses:
        "200": {$ref: '#/components/responses/SuccessfulOperation'}
        "404": {$ref: '#/components/responses/NotFound'}
        "5XX": {$ref: '#/components/responses/ServerError'}

  /api/session/{session_uuid}/requests:
    get:
      tags: [api]
      summary: Get requests list for session with passed UUID (sorted from newest to oldest)
      description: Returns requests list for session with passed UUID
      operationId: apiSessionGetAllRequests
      parameters: [{$ref: '#/components/parameters/SessionUUID'}]
      responses:
        "200": {$ref: '#/components/responses/RequestsList'}
        "404": {$ref: '#/components/responses/NotFound'}
        "5XX": {$ref: '#/components/responses/ServerError'}

    delete:
      tags: [api]
      summary: Delete all requests for session with passed UUID
      description: Deletes all requests for session with passed UUID
      operationId: apiSessionDeleteAllRequests
      parameters: [{$ref: '#/components/parameters/SessionUUID'}]
      responses:
        "200": {$ref: '#/components/responses/SuccessfulOperation'}
        "404": {$ref: '#/components/responses/NotFound'}
        "5XX": {$ref: '#/components/responses/ServerError'}

  /api/session/{session_uuid}/requests/{request_uuid}:
    get:
      tags: [api]
      summary: Get request details by UUID for session with passed UUID
      description: Returns request details by UUID for session with passed UUID
      operationId: apiSessionGetRequest
      parameters: [{$ref: '#/components/parameters/SessionUUID'}, {$ref: '#/components/parameters/RequestUUID'}]
      responses:
        "200": {$ref: '#/components/responses/Request'}
        "404": {$ref: '#/components/responses/NotFound'}
        "5XX": {$ref: '#/components/responses/ServerError'}

    delete:
      tags: [api]
      summary: Delete request by UUID for session with passed UUID
      description: Deletes request by UUID for session with passed UUID
      operationId: apiSessionDeleteRequest
      parameters:
        - {$ref: '#/components/parameters/SessionUUID'}
        - {$ref: '#/components/parameters/RequestUUID'}
      responses:
        "200": {$ref: '#/components/responses/SuccessfulOperation'}
        "404": {$ref: '#/components/responses/NotFound'}
        "5XX": {$ref: '#/components/responses/ServerError'}

  /ws/session/{session_uuid}:
    get:
      tags: [websocket]
      summary: Websocket endpoint
      description: Websocket endpoint
      operationId: websocketSession
      parameters: [{$ref: '#/components/parameters/SessionUUID'}]
      responses:
        "101": {description: Switching protocols}
        "200": {$ref: '#/components/responses/WebsocketSessionEvents'}
        "429": {$ref: '#/components/responses/TooManyConnections'}
        "404": {$ref: '#/components/responses/NotFound'}
        "5XX": {$ref: '#/components/responses/ServerError'}

  /ready:
    get:
      tags: [health]
      summary: Readiness probe
      description: Is the app ready to serve traffic?
      operationId: readinessProbe
      responses:
        "200": {$ref: '#/components/responses/ServiceHealthy'}
        "503": {$ref: '#/components/responses/ServiceUnhealthy'}

    head:
      tags: [health]
      summary: Readiness probe (HEAD)
      description: Is an alias for the GET method, but without content in the response body
      operationId: readinessProbeHead
      responses:
        "200": {$ref: '#/components/responses/ServiceHealthy'}
        "503": {$ref: '#/components/responses/ServiceUnhealthy'}

  /live:
    get:
      tags: [health]
      summary: Liveness probe
      description: Is the app alive or dead?
      operationId: livenessProbe
      responses:
        "200": {$ref: '#/components/responses/ServiceHealthy'}
        "503": {$ref: '#/components/responses/ServiceUnhealthy'}

    head:
      tags: [health]
      summary: Liveness probe (HEAD)
      description: Is an alias for the GET method, but without content in the response body
      operationId: livenessProbeHead
      responses:
        "200": {$ref: '#/components/responses/ServiceHealthy'}
        "503": {$ref: '#/components/responses/ServiceUnhealthy'}

  /metrics:
    get:
      tags: [metrics]
      summary: Application metrics
      description: In Prometheus format
      operationId: appMetrics
      externalDocs: {url: 'https://prometheus.io/', description: Prometheus}
      responses:
        "200": {$ref: '#/components/responses/Metrics'}

x-uuid-schema: &uuid-schema
  type: string
  format: uuid
  pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
  example: 9b6bbab9-c197-4dd3-bc3f-3cb6253820c7

components:
  parameters:
    SessionUUID:
      name: session_uuid
      in: path
      description: Session UUID # version 4
      required: true
      schema: *uuid-schema

    RequestUUID:
      name: request_uuid
      in: path
      description: Request UUID # version 4
      required: true
      schema: *uuid-schema

    RequiredStatusCode:
      name: status_code
      in: path
      description: Required HTTP response code
      required: true
      schema: {type: integer, minimum: 100, maximum: 599, example: 200}

  requestBodies:
    NewSession:
      description: New session options
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              status_code: {$ref: '#/components/schemas/StatusCode'}
              content_type: {$ref: '#/components/schemas/ContentType'}
              response_delay: {$ref: '#/components/schemas/ResponseDelayInSeconds'}
              response_content_base64: {$ref: '#/components/schemas/Base64Encoded'}

  schemas:
    TrueOnly:
      type: boolean
      enum: [true]
      example: true

    FalseOnly:
      type: boolean
      enum: [false]
      example: false

    StatusCode:
      type: integer
      description: HTTP status code
      example: 301
      minimum: 100
      maximum: 530

    ContentType:
      type: string
      example: 'application/json'
      maxLength: 32

    ResponseDelayInSeconds:
      type: integer
      description: In seconds
      maximum: 30
      example: 5

    Base64Encoded:
      type: string
      description: Base64 encoded content
      maxLength: 10240
      example: aGVsbG8gd29ybGQ=

    UnixTime:
      type: integer
      description: Unix timestamp
      example: 1667845578
      minimum: 1600000000

    UUID: *uuid-schema

    HttpMethod:
      type: string
      enum: [GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE]
      example: GET

    HttpHeader:
      type: object
      description: HTTP header
      additionalProperties: false
      properties:
        name:
          type: string
          example: X-Header-Name
          minLength: 1
        value:
          type: string
          example: X-Header-Value
      required: [name, value]

    WebsocketPayload:
      type: object
      description: Websocket response payload
      additionalProperties: false
      properties:
        name:
          type: string
          example: request-deleted
          enum: [request-registered, request-deleted, requests-deleted]
        data:
          type: string
          example: 9b6bbab9-c197-4dd3-bc3f-3cb6253820c7
          minLength: 1
      required: [name, data]

    AppSettingsLimits:
      type: object
      description: Application limit settings
      additionalProperties: false
      properties:
        max_requests: {type: integer, maximum: 65535, minimum: 0, example: 128}
        max_webhook_body_size:
          type: integer
          description: Maximal webhook request body size (in bytes), zero means unlimited
          maximum: 4294967295
          minimum: 0
          example: 1024
        session_lifetime_sec: {type: integer, maximum: 4294967295, example: 5}
      required: [max_requests, max_webhook_body_size, session_lifetime_sec]

    SessionResponseOptions:
      type: object
      description: Session response options
      additionalProperties: false
      properties:
        content_base64: {$ref: '#/components/schemas/Base64Encoded'}
        content_type: {$ref: '#/components/schemas/ContentType'}
        code: {$ref: '#/components/schemas/StatusCode'}
        delay_sec: {$ref: '#/components/schemas/ResponseDelayInSeconds'}
      required: [content_base64, content_type, code, delay_sec]

    SessionRequest:
      type: object
      description: Recorded request
      additionalProperties: false
      properties:
        uuid: {$ref: '#/components/schemas/UUID'}
        client_address:
          type: string
          format: IPv4
          example: '214.184.32.7'
        method: {$ref: '#/components/schemas/HttpMethod'}
        content_base64: {$ref: '#/components/schemas/Base64Encoded'} # request content
        headers:
          type: array
          items: {$ref: '#/components/schemas/HttpHeader'}
        url:
          type: string
          example: 'https://example.com/path?query=string'
        created_at_unix: {$ref: '#/components/schemas/UnixTime'}
      required: [uuid, client_address, method, content_base64, headers, url, created_at_unix]

    Failure:
      description: Request processing error (server-side error, bad request and so on)
      type: object
      properties:
        success: {$ref: '#/components/schemas/FalseOnly'}
        code: {type: integer, example: 400, minimum: 400, maximum: 599}
        message: {type: string, example: Internal error}
      required: [success, code, message]

  responses:
    AppVersion:
      description: Application version information
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties: {version: {type: string, example: '0.0.1'}}
            required: [version]

    AppSettings:
      description: Application settings
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              limits: {$ref: '#/components/schemas/AppSettingsLimits'}
            required: [limits]

    SessionOptions:
      description: Created session options
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              uuid: {$ref: '#/components/schemas/UUID'}
              created_at_unix: {$ref: '#/components/schemas/UnixTime'}
              response: {$ref: '#/components/schemas/SessionResponseOptions'}
            required: [uuid, response, created_at_unix]

    Request:
      description: Recorded request details
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SessionRequest'

    RequestsList:
      description: Requests list
      content:
        application/json:
          schema:
            type: array
            items: {$ref: '#/components/schemas/SessionRequest'}

    WebsocketSessionEvents:
      description: Websocket session events stream
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WebsocketPayload'

    SuccessfulOperation:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              success: {$ref: '#/components/schemas/TrueOnly'}
            required: [success]

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Failure'

    TooManyConnections:
      description: Too many connections
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Failure'

    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Failure'

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Failure'

    ServiceHealthy:
      description: Ok
      content:
        text/plain:
          example: OK

    ServiceUnhealthy:
      description: Service Unavailable
      content:
        text/plain:
          example: |
            application error: some important service is unavailable: host "10.0.0.10" unreachable

    Metrics:
      description: App metrics
      content:
        text/plain:
          example: |
            # HELP go_goroutines Number of goroutines that currently exist.
            # TYPE go_goroutines gauge
            go_goroutines 92

# Online editor: <https://editor.swagger.io/>
openapi: 3.0.1 # Docs: <https://swagger.io/docs/specification/2-0/basic-structure/>

info:
  title: WebHook Tester
  version: 0.0.1
  contact: {name: tarampampam, url: 'https://github.com/tarampampam'}

tags:
  - name: api
  - name: websocket
  - name: health
  - name: metrics
  - name: webhook

servers:
  - url: /
    description: Current server

paths:
  /api/version:
    get:
      tags: [api]
      summary: Get application version
      operationId: apiAppVersion
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties: {version: {type: string, example: ['0.0.1', '1.2.3@undefined']}}
                required: [version]
        "5XX":
          description: Internal error
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}

  /api/settings:
    get:
      tags: [api]
      summary: Get application settings
      operationId: apiSettings
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  limits:
                    type: object
                    additionalProperties: false
                    properties:
                      max_requests: {type: number, maximum: 65535, example: 128}
                      max_webhook_body_size:
                        type: number
                        description: Maximal webhook request body size (in bytes), zero means unlimited
                        maximum: 4294967295
                        example: 1024
                      session_lifetime_sec: {type: integer, maximum: 4294967295, example: 5}
                    required: [max_requests, max_webhook_body_size, session_lifetime_sec]
                required: [limits]
        "5XX":
          description: Internal error
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}

  /api/session:
    post:
      tags: [api]
      summary: Create new session
      operationId: apiSessionCreate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                status_code: {$ref: '#/components/schemas/StatusCode'}
                content_type: {$ref: '#/components/schemas/ContentType'}
                response_delay: {$ref: '#/components/schemas/ResponseDelayInSeconds'}
                response_content_base64: {$ref: '#/components/schemas/Base64Encoded'}
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  uuid: {$ref: '#/components/schemas/UUID'}
                  created_at_unix: {$ref: '#/components/schemas/UnixTime'}
                  response:
                    type: object
                    additionalProperties: false
                    properties:
                      content_base64: {$ref: '#/components/schemas/Base64Encoded'}
                      content_type: {$ref: '#/components/schemas/ContentType'}
                      code: {$ref: '#/components/schemas/StatusCode'}
                      delay_sec: {$ref: '#/components/schemas/ResponseDelayInSeconds'}
                    required: [content_base64, content_type, code, delay_sec]
                required: [uuid, response, created_at_unix]
        "400":
          description: Bad request
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}
        "5XX":
          description: Internal error
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}

  /api/session/{session_uuid}:
    delete:
      tags: [api]
      summary: Delete session with passed UUID
      operationId: apiSessionDelete
      parameters: [{$ref: '#/components/parameters/SessionUUID'}]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties: {success: {type: boolean, enum: [true]}}
                required: [success]
        "404":
          description: Not found
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}
        "5XX":
          description: Internal error
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}

  /api/session/{session_uuid}/requests:
    get:
      tags: [api]
      summary: Get requests list for session with passed UUID (sorted from newest to oldest)
      operationId: apiSessionGetAllRequests
      parameters: [{$ref: '#/components/parameters/SessionUUID'}]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items: {$ref: '#/components/schemas/SessionRequest'}
        "404":
          description: Session was not found
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}
        "5XX":
          description: Internal error
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}

    delete:
      tags: [api]
      summary: Delete all requests for session with passed UUID
      operationId: apiSessionDeleteAllRequests
      parameters: [{$ref: '#/components/parameters/SessionUUID'}]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties: {success: {type: boolean, enum: [true]}}
                required: [success]
        "404":
          description: Requests for session was not found
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}
        "5XX":
          description: Internal error
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}

  /api/session/{session_uuid}/requests/{request_uuid}:
    get:
      tags: [api]
      summary: Get request details by UUID for session with passed UUID
      operationId: apiSessionGetRequest
      parameters: [{$ref: '#/components/parameters/SessionUUID'}, {$ref: '#/components/parameters/RequestUUID'}]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionRequest'
        "404":
          description: Session or request was not found
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}
        "5XX":
          description: Internal error
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}

    delete:
      tags: [api]
      summary: Delete request by UUID for session with passed UUID
      operationId: apiSessionDeleteRequest
      parameters: [{$ref: '#/components/parameters/SessionUUID'}, {$ref: '#/components/parameters/RequestUUID'}]
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties: {success: {type: boolean, enum: [true]}}
                required: [success]
        "404":
          description: Session or request was not found
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}
        "5XX":
          description: Internal error
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}

  /ws/session/{session_uuid}:
    get:
      tags: [websocket]
      summary: Websocket endpoint
      operationId: websocketSession
      parameters: [{$ref: '#/components/parameters/SessionUUID'}]
      responses:
        "101":
          description: Switching protocols
        "429":
          description: Too many active connections
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}
        "404":
          description: Session was not found
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}
        "5XX":
          description: Internal error
          content: {application/json: {schema: {$ref: '#/components/schemas/RequestFailed'}}}

  /ready:
    get: # + head?
      tags: [health]
      summary: Readiness probe
      description: App is ready to serve traffic?
      operationId: readinessProbe
      responses:
        "200": {$ref: '#/components/responses/ServiceHealthy'}
        "503": {$ref: '#/components/responses/ServiceUnhealthy'}

  /live:
    get: # + head?
      tags: [health]
      summary: Liveness probe
      description: App is alive or dead?
      operationId: livenessProbe
      responses:
        "200": {$ref: '#/components/responses/ServiceHealthy'}
        "503": {$ref: '#/components/responses/ServiceUnhealthy'}

  /metrics:
    get:
      tags: [metrics]
      summary: Application metrics
      description: In Prometheus format
      operationId: appMetrics
      externalDocs: {url: 'https://prometheus.io/', description: Prometheus}
      responses:
        "200":
          description: ะะบ
          content:
            text/plain:
              example: |
                # HELP go_goroutines Number of goroutines that currently exist.
                # TYPE go_goroutines gauge
                go_goroutines 92

  /{session_uuid}:
    get:
      tags: &wh-tag [webhook]
      summary: &wh-sum Webhook endpoint
      operationId: webhookGet
      parameters: &wh-params [{$ref: '#/components/parameters/SessionUUID'}]
      responses: &wh-resp
        "2XX": {$ref: '#/components/responses/WebHook'}
        "3XX": {$ref: '#/components/responses/WebHook'}
        "4XX": {$ref: '#/components/responses/WebHook'}
        "5XX": {$ref: '#/components/responses/WebHook'}
    head: {operationId: webhookHead, tags: *wh-tag, summary: *wh-sum, parameters: *wh-params, responses: *wh-resp}
    post: {operationId: webhookPost, tags: *wh-tag, summary: *wh-sum, parameters: *wh-params, responses: *wh-resp}
    put: {operationId: webhookPut, tags: *wh-tag, summary: *wh-sum, parameters: *wh-params, responses: *wh-resp}
    patch: {operationId: webhookPatch, tags: *wh-tag, summary: *wh-sum, parameters: *wh-params, responses: *wh-resp}
    delete: {operationId: webhookDelete, tags: *wh-tag, summary: *wh-sum, parameters: *wh-params, responses: *wh-resp}
    options: {operationId: webhookOptions, tags: *wh-tag, summary: *wh-sum, parameters: *wh-params, responses: *wh-resp}
    trace: {operationId: webhookTrace, tags: *wh-tag, summary: *wh-sum, parameters: *wh-params, responses: *wh-resp}

  /{session_uuid}/{status_code}:
    get:
      tags: &wh-code-tag [webhook]
      summary: &wh-code-sum Webhook endpoint with a status code
      operationId: webhookWithCode
      parameters: &wh-code-params
        - {$ref: '#/components/parameters/SessionUUID'}
        - name: status_code
          in: path
          description: Required HTTP response code
          required: true
          schema: {type: integer, minimum: 100, maximum: 599, example: 200}
      responses: &wh-code-resp
        "2XX": {$ref: '#/components/responses/WebHook'}
        "3XX": {$ref: '#/components/responses/WebHook'}
        "4XX": {$ref: '#/components/responses/WebHook'}
        "5XX": {$ref: '#/components/responses/WebHook'}
    head: {operationId: webhookWithCodeHead, tags: *wh-code-tag, summary: *wh-code-sum, parameters: *wh-code-params, responses: *wh-code-resp}
    post: {operationId: webhookWithCodePost, tags: *wh-code-tag, summary: *wh-code-sum, parameters: *wh-code-params, responses: *wh-code-resp}
    put: {operationId: webhookWithCodePut, tags: *wh-code-tag, summary: *wh-code-sum, parameters: *wh-code-params, responses: *wh-code-resp}
    patch: {operationId: webhookWithCodePatch, tags: *wh-code-tag, summary: *wh-code-sum, parameters: *wh-code-params, responses: *wh-code-resp}
    delete: {operationId: webhookWithCodeDelete, tags: *wh-code-tag, summary: *wh-code-sum, parameters: *wh-code-params, responses: *wh-code-resp}
    options: {operationId: webhookWithCodeOptions, tags: *wh-code-tag, summary: *wh-code-sum, parameters: *wh-code-params, responses: *wh-code-resp}
    trace: {operationId: webhookWithCodeTrace, tags: *wh-code-tag, summary: *wh-code-sum, parameters: *wh-code-params, responses: *wh-code-resp}

  /{session_uuid}/{any}:
    get:
      tags: &wh-any-tag [webhook]
      summary: &wh-any-sum Webhook endpoint with any postfix
      operationId: webhookWithAny
      parameters: &wh-any-params
        - {$ref: '#/components/parameters/SessionUUID'}
        - name: any
          in: path
          description: Any string
          required: true
          schema:
            type: string
            example: foobar
      responses: &wh-any-resp
        "2XX": {$ref: '#/components/responses/WebHook'}
        "3XX": {$ref: '#/components/responses/WebHook'}
        "4XX": {$ref: '#/components/responses/WebHook'}
        "5XX": {$ref: '#/components/responses/WebHook'}
    head: {operationId: webhookWithAnyHead, tags: *wh-any-tag, summary: *wh-any-sum, parameters: *wh-any-params, responses: *wh-any-resp}
    post: {operationId: webhookWithAnyPost, tags: *wh-any-tag, summary: *wh-any-sum, parameters: *wh-any-params, responses: *wh-any-resp}
    put: {operationId: webhookWithAnyPut, tags: *wh-any-tag, summary: *wh-any-sum, parameters: *wh-any-params, responses: *wh-any-resp}
    patch: {operationId: webhookWithAnyPatch, tags: *wh-any-tag, summary: *wh-any-sum, parameters: *wh-any-params, responses: *wh-any-resp}
    delete: {operationId: webhookWithAnyDelete, tags: *wh-any-tag, summary: *wh-any-sum, parameters: *wh-any-params, responses: *wh-any-resp}
    options: {operationId: webhookWithAnyOptions, tags: *wh-any-tag, summary: *wh-any-sum, parameters: *wh-any-params, responses: *wh-any-resp}
    trace: {operationId: webhookWithAnyTrace, tags: *wh-any-tag, summary: *wh-any-sum, parameters: *wh-any-params, responses: *wh-any-resp}

x-uuid-schema: &uuid-schema
  type: string
  format: uuid
  pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
  example: 9b6bbab9-c197-4dd3-bc3f-3cb6253820c7

components:
  parameters:
    SessionUUID:
      name: session_uuid
      in: path
      description: Session UUID # version 4
      required: true
      schema: *uuid-schema

    RequestUUID:
      name: request_uuid
      in: path
      description: Request UUID # version 4
      required: true
      schema: *uuid-schema

  schemas:
    StatusCode:
      type: integer
      description: HTTP status code
      example: 301
      minimum: 100
      maximum: 530

    ContentType:
      type: string
      example: 'application/json'
      maxLength: 32

    ResponseDelayInSeconds:
      type: integer
      description: In seconds
      maximum: 30
      example: 5

    Base64Encoded:
      type: string
      description: Base64 encoded content
      maxLength: 10240
      example: aGVsbG8gd29ybGQ=

    UnixTime:
      type: integer
      description: Unix timestamp
      example: 1667845578
      minimum: 1600000000

    UUID: *uuid-schema

    HttpMethod:
      type: string
      enum: [GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE]
      example: GET

    SessionRequest:
      type: object
      description: Recorded request
      additionalProperties: false
      properties:
        uuid: {$ref: '#/components/schemas/UUID'}
        client_address:
          type: string
          format: IPv4
          example: '214.184.32.7'
        method: {$ref: '#/components/schemas/HttpMethod'}
        content_base64: {$ref: '#/components/schemas/Base64Encoded'} # request content
        headers:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              name:
                type: string
                example: 'X-Header-Name'
              value:
                type: string
                example: 'X-Header-Value'
            required: [name, value]
        url:
          type: string
          example: 'https://example.com/path?query=string'
        created_at_unix: {$ref: '#/components/schemas/UnixTime'}
      required: [uuid, client_address, method, content_base64, headers, url, created_at_unix]

    RequestFailed:
      description: Request processing error (server-side error, bad request and so on)
      type: object
      properties:
        success: {type: boolean, enum: [false]}
        code: {type: integer, example: 400, minimum: 400, maximum: 599}
        message: {type: string, example: Internal error}
      required: [success, code, message]

  responses:
    WebHook:
      description: Webhook response
      content:
        application/json:
          example: {message: 'Example response'}
        text/html:
          example: |
            <!doctype html>
            <html lang="en">
            <body>
              <h1>Example response</h1>
            </body>
            </html>
        text/plain:
          example: Example response

    ServiceHealthy:
      description: Ok
      content:
        text/plain:
          example: OK

    ServiceUnhealthy:
      description: Service Unavailable
      content:
        text/plain:
          example: |
            application error: some important service is unavailable: host "10.0.0.10" unreachable

{
	"info": {
		"_postman_id": "ab33f9e7-8c46-45c9-831d-1b1cb267545f",
		"name": "default",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Static assets",
			"item": [
				{
					"name": "index",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header is text/html', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.contains('text/html')\r",
									"});\r",
									"\r",
									"pm.test('HTML is correct', () => {\r",
									"    // docs: <https://learning.postman.com/docs/writing-scripts/script-references/test-examples/#parsing-response-body-data>\r",
									"    const $ = cheerio.load(pm.response.text());\r",
									"\r",
									"    pm.expect($('title').html()).to.contains('WebHook Tester')\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "favicon.ico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header is image', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('image')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/favicon.ico",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"favicon.ico"
							]
						}
					},
					"response": []
				},
				{
					"name": "robots.txt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header is text/plain', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('text/plain')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/robots.txt",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"robots.txt"
							]
						}
					},
					"response": []
				},
				{
					"name": "sitemap.xml",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('Content-Type header is application/xml', () => {\r",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.contains('application/xml')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/sitemap.xml",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sitemap.xml"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Service endpoints",
			"item": [
				{
					"name": "ready",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('Empty response body', () => {\r",
									"    pm.expect(pm.response.responseSize).to.be.equal(0)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ready",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ready"
							]
						}
					},
					"response": []
				},
				{
					"name": "live",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('Empty response body', () => {\r",
									"    pm.expect(pm.response.responseSize).to.be.equal(0)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/live",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"live"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "API",
			"item": [
				{
					"name": "Session",
					"item": [
						{
							"name": "Requests",
							"item": [
								{
									"name": "Get request details by UUID for session with passed UUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const baseUrl = pm.environment.get('base_url')",
													"",
													"// create session",
													"pm.sendRequest({",
													"    url: baseUrl + '/api/session',",
													"    method: 'POST',",
													"    body: {",
													"        mode: 'raw',",
													"        raw: '{\"status_code\": 203}',",
													"    },",
													"}, (err, res) => {",
													"    if (err) {",
													"        throw err",
													"    }",
													"",
													"    pm.expect(res.code).to.equal(200)",
													"",
													"    let sessionUuid = res.json().uuid;",
													"    pm.variables.set('session_uuid', sessionUuid)",
													"",
													"    // make simple request to the webhook endpoint (for just created session)",
													"    pm.sendRequest({",
													"        url: baseUrl + '/' + sessionUuid + '/baz-url',",
													"        method: 'POST',",
													"        header: {",
													"            'X-Foo': 'foo'",
													"        },",
													"        body: {",
													"            mode: 'raw',",
													"            raw: 'bar content',",
													"        },",
													"    }, (err, res) => {",
													"        if (err) {",
													"            throw err",
													"        }",
													"",
													"        pm.expect(res.code).to.equal(203)",
													"",
													"        // get requests list",
													"        pm.sendRequest({",
													"            url: baseUrl + '/api/session/'+sessionUuid+'/requests',",
													"            method: 'GET',",
													"        }, (err, res) => {",
													"            if (err) {",
													"                throw err",
													"            }",
													"",
													"            pm.expect(res.code).to.equal(200)",
													"            let data = res.json()",
													"            pm.expect(data.length).to.eql(1)",
													"",
													"            // take first recorded request uuid",
													"            pm.variables.set('request_uuid', data[0].uuid)",
													"        })",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200)",
													"})",
													"",
													"pm.test('JSON object has correct structure', () => {",
													"    const data = pm.response.json()",
													"    const sessionUuid = pm.variables.get('session_uuid')",
													"    const requestUuid = pm.variables.get('request_uuid')",
													"",
													"    pm.expect(data).to.have.all.keys('uuid', 'client_address', 'method', 'content', 'headers', 'url', 'created_at_unix')",
													"",
													"    pm.expect(data.uuid).to.be.eql(requestUuid)",
													"    pm.expect(data.client_address).to.be.a('string')",
													"    pm.expect(data.method).to.be.eql('POST')",
													"    pm.expect(data.content).to.be.eql('bar content')",
													"    pm.expect(data.url).to.be.eql('/' + sessionUuid + '/baz-url')",
													"    pm.expect(data.created_at_unix).to.be.a('number')",
													"})",
													"",
													"pm.test('JSON object contains required HTTP header', () => {",
													"    const data = pm.response.json()",
													"",
													"    let headerFound = false",
													"",
													"    data.headers.each((v) => {",
													"        if (v.name === 'X-Foo' && v.value === 'foo') {",
													"            headerFound = true",
													"        }",
													"    })",
													"",
													"    pm.expect(headerFound).to.be.true",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/session/{{session_uuid}}/requests/{{request_uuid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"session",
												"{{session_uuid}}",
												"requests",
												"{{request_uuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete request by UUID for session with passed UUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const baseUrl = pm.environment.get('base_url')",
													"",
													"// create session",
													"pm.sendRequest({",
													"    url: baseUrl + '/api/session',",
													"    method: 'POST',",
													"    body: {",
													"        mode: 'raw',",
													"        raw: '{}',",
													"    },",
													"}, (err, res) => {",
													"    if (err) {",
													"        throw err",
													"    }",
													"",
													"    pm.expect(res.code).to.equal(200)",
													"",
													"    let sessionUuid = res.json().uuid;",
													"    pm.variables.set('session_uuid', sessionUuid)",
													"",
													"    // make simple request to the webhook endpoint (for just created session)",
													"    pm.sendRequest({",
													"        url: baseUrl + '/' + sessionUuid,",
													"        method: 'GET',",
													"    }, (err, res) => {",
													"        if (err) {",
													"            throw err",
													"        }",
													"",
													"        // get requests list",
													"        pm.sendRequest({",
													"            url: baseUrl + '/api/session/'+sessionUuid+'/requests',",
													"            method: 'GET',",
													"        }, (err, res) => {",
													"            if (err) {",
													"                throw err",
													"            }",
													"",
													"            pm.expect(res.code).to.equal(200)",
													"            let data = res.json()",
													"            pm.expect(data.length).to.eql(1)",
													"",
													"            // take first recorded request uuid",
													"            pm.variables.set('request_uuid', data[0].uuid)",
													"        })",
													"    })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200)",
													"})",
													"",
													"pm.test('JSON object has correct structure', () => {",
													"    var data = pm.response.json()",
													"",
													"    pm.expect(data).to.have.all.keys('success')",
													"",
													"    pm.expect(data.success).to.be.true",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/session/{{session_uuid}}/requests/{{request_uuid}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"session",
												"{{session_uuid}}",
												"requests",
												"{{request_uuid}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get requests list for session with passed UUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const baseUrl = pm.environment.get('base_url')",
													"",
													"// create session",
													"pm.sendRequest({",
													"    url: baseUrl + '/api/session',",
													"    method: 'POST',",
													"    body: {",
													"        mode: 'raw',",
													"        raw: '{}',",
													"    },",
													"}, (err, res) => {",
													"    if (err) {",
													"        throw err",
													"    }",
													"",
													"    pm.expect(res.code).to.equal(200)",
													"",
													"    let sessionUuid = res.json().uuid;",
													"    pm.variables.set('session_uuid', sessionUuid)",
													"",
													"    // make two simple requests to the webhook endpoint (for just created session)",
													"    pm.sendRequest({ url: baseUrl + '/' + sessionUuid, method: 'GET' })",
													"    pm.sendRequest({ url: baseUrl + '/' + sessionUuid + '/two', method: 'GET' })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200)",
													"})",
													"",
													"pm.test('JSON object has correct structure', () => {",
													"    const data = pm.response.json()",
													"    const sessionUuid = pm.variables.get('session_uuid')",
													"",
													"    data.each((v) => {",
													"        pm.expect(v).to.have.all.keys('uuid', 'client_address', 'method', 'content', 'headers', 'url', 'created_at_unix')",
													"",
													"        pm.expect(v.uuid).to.be.a('string')",
													"        pm.expect(v.client_address).to.be.a('string')",
													"        pm.expect(v.method).to.be.eql('GET')",
													"        pm.expect(v.content).to.be.eql('')",
													"        pm.expect(v.url).to.be.contains('/' + sessionUuid)",
													"        pm.expect(v.created_at_unix).to.be.a('number')",
													"    })",
													"",
													"    pm.expect(data.length).to.be.eql(2)",
													"})",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/session/{{session_uuid}}/requests",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"session",
												"{{session_uuid}}",
												"requests"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete all requests for session with passed UUID",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const baseUrl = pm.environment.get('base_url')",
													"",
													"// create session",
													"pm.sendRequest({",
													"    url: baseUrl + '/api/session',",
													"    method: 'POST',",
													"    body: {",
													"        mode: 'raw',",
													"        raw: '{}',",
													"    },",
													"}, (err, res) => {",
													"    if (err) {",
													"        throw err",
													"    }",
													"",
													"    pm.expect(res.code).to.equal(200)",
													"",
													"    let sessionUuid = res.json().uuid;",
													"    pm.variables.set('session_uuid', sessionUuid)",
													"",
													"    // make two simple requests to the webhook endpoint (for just created session)",
													"    pm.sendRequest({ url: baseUrl + '/' + sessionUuid, method: 'GET' })",
													"    pm.sendRequest({ url: baseUrl + '/' + sessionUuid + '/two', method: 'GET' })",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200)",
													"})",
													"",
													"pm.test('JSON object has correct structure', () => {",
													"    var data = pm.response.json()",
													"",
													"    pm.expect(data).to.have.all.keys('success')",
													"",
													"    pm.expect(data.success).to.be.true",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/session/{{session_uuid}}/requests",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"session",
												"{{session_uuid}}",
												"requests"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Create new session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test('JSON object has correct structure', () => {",
											"    var data = pm.response.json()",
											"",
											"    pm.expect(data).to.have.all.keys('uuid', 'response')",
											"",
											"    pm.expect(data.uuid).to.be.a('string')",
											"",
											"    pm.expect(data.response.content).to.be.a('string')",
											"    pm.expect(data.response.code).to.be.eql(201)",
											"    pm.expect(data.response.content_type).to.be.eql('application/json2')",
											"    pm.expect(data.response.delay_sec).to.be.eql(0)",
											"    pm.expect(data.response.created_at_unix).to.be.a('number')",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status_code\": 201,\n    \"content_type\": \"application/json2\",\n    \"response_delay\": 0,\n    \"response_body\": \"foo content\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/session",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"session"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete session with passed UUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get('base_url') + '/api/session',",
											"    method: 'POST',",
											"    body: {",
											"        mode: 'raw',",
											"        raw: '{}',",
											"    },",
											"}, (err, res) => {",
											"    if (err) {",
											"        throw err",
											"    }",
											"",
											"    pm.expect(res.code).to.equal(200)",
											"",
											"    // Variables help: <https://learning.postman.com/docs/sending-requests/variables/>",
											"    pm.variables.set('new_session_uuid', res.json().uuid)",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200)",
											"})",
											"",
											"pm.test('JSON object has correct structure', () => {",
											"    var data = pm.response.json()",
											"",
											"    pm.expect(data).to.have.all.keys('success')",
											"",
											"    pm.expect(data.success).to.be.true",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/session/{{new_session_uuid}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"session",
										"{{new_session_uuid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get application settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('JSON object has correct structure', () => {\r",
									"    var data = pm.response.json()\r",
									"\r",
									"    pm.expect(data).to.have.all.keys('limits')\r",
									"\r",
									"    pm.expect(data.limits).to.have.all.keys('max_requests', 'max_webhook_body_size', 'session_lifetime_sec')\r",
									"    pm.expect(data.limits.max_requests).to.be.a('number')\r",
									"    pm.expect(data.limits.max_webhook_body_size).to.be.a('number')\r",
									"    pm.expect(data.limits.session_lifetime_sec).to.be.a('number')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/settings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get application version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200)\r",
									"});\r",
									"\r",
									"pm.test('JSON object has correct structure', () => {\r",
									"    var data = pm.response.json()\r",
									"\r",
									"    pm.expect(data).to.have.all.keys('version')\r",
									"\r",
									"    pm.expect(data.version).to.be.a('string')\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/version",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"version"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Content-Type header is application/json', () => {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.be.eql('application/json')",
							"})",
							"",
							"pm.test('Caching control headers is valid', () => {",
							"    pm.expect(pm.response.headers.get('Cache-Control')).to.be.eql('no-cache, no-store, must-revalidate')",
							"    pm.expect(pm.response.headers.get('Expires')).to.be.eql('0')",
							"    pm.expect(pm.response.headers.get('Pragma')).to.be.eql('no-cache')",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "Webhook",
			"item": [
				{
					"name": "Simple webhook",
					"item": [
						{
							"name": "Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "TRACE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 202', () => {",
									"    pm.response.to.have.status(202)",
									"})",
									"",
									"if (pm.request.method !== 'HEAD') {",
									"    pm.test('Body is correct', () => {",
									"        pm.response.to.have.body('foo content')",
									"    })",
									"}",
									"",
									"pm.test('Content-Type header is text/foo', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.be.eql('text/foo')",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "Webhook with status code",
					"item": [
						{
							"name": "Webhook with status code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_status_code}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_status_code}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with status code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_status_code}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_status_code}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with status code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_status_code}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_status_code}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with status code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_status_code}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_status_code}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with status code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_status_code}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_status_code}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with status code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_status_code}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_status_code}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with status code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_status_code}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_status_code}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with status code",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "TRACE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_status_code}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_status_code}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const skipStatusCodes = [",
									"    204, // No Content",
									"    304, // Not Modified",
									"]",
									"",
									"let randomStatusCode = Math.floor(Math.random() * (599 - 200 + 1) + 200)",
									"",
									"if (skipStatusCodes.indexOf(randomStatusCode) !== -1) {",
									"    randomStatusCode = 201 // fallback",
									"}",
									"",
									"// Variables help: <https://learning.postman.com/docs/sending-requests/variables/>",
									"pm.variables.set('random_status_code', randomStatusCode)"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const expectedStatusCode = pm.variables.get('random_status_code')",
									"",
									"pm.test('Status code is ' + expectedStatusCode, () => {",
									"    pm.response.to.have.status(expectedStatusCode)",
									"})",
									"",
									"if (pm.request.method !== 'HEAD') {",
									"    pm.test('Body is correct', () => {",
									"        pm.response.to.have.body('foo content')",
									"    })",
									"}",
									"",
									"pm.test('Content-Type header is text/foo', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.be.eql('text/foo')",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "Webhook with any string after session UUID",
					"item": [
						{
							"name": "Webhook with any string after session UUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_path}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with any string after session UUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_path}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with any string after session UUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_path}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with any string after session UUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_path}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with any string after session UUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_path}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with any string after session UUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "HEAD",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_path}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with any string after session UUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "OPTIONS",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_path}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_path}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Webhook with any string after session UUID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "TRACE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/{{webhooksSessionUUID}}/{{random_path}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{webhooksSessionUUID}}",
										"{{random_path}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const allowed = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZабвгдёйАБВГДЁЙ0123456789///?\"",
									"const randomPath = allowed.split('').sort(() => {return 0.5-Math.random()}).join('')",
									"",
									"// Variables help: <https://learning.postman.com/docs/sending-requests/variables/>",
									"pm.variables.set('random_path', randomPath)"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const expectedStatusCode = pm.variables.get('random_status_code')",
									"",
									"pm.test('Status code is 202', () => {",
									"    pm.response.to.have.status(202)",
									"})",
									"",
									"if (pm.request.method !== 'HEAD') {",
									"    pm.test('Body is correct', () => {",
									"        pm.response.to.have.body('foo content')",
									"    })",
									"}",
									"",
									"pm.test('Content-Type header is text/foo', () => {",
									"  pm.expect(pm.response.headers.get('Content-Type')).to.be.eql('text/foo')",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "Invalid session UUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', () => {",
									"    pm.response.to.have.status(404)",
									"})",
									"",
									"pm.test('Content-Type header is text/html', () => {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.contains('text/html')",
									"})",
									"",
									"pm.test('response is correct', () => {",
									"    const $ = cheerio.load(pm.response.text());",
									"",
									"    pm.expect($('title').html()).to.contains('Not Found')",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{$randomUUID}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{$randomUUID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const webhooksSessionUUID = pm.collectionVariables.get('webhooksSessionUUID')",
							"",
							"if (webhooksSessionUUID == undefined || webhooksSessionUUID == '') {",
							"    console.info('create new session for webhook tests')",
							"",
							"    pm.sendRequest({",
							"        url: pm.environment.get('base_url') + '/api/session',",
							"        method: 'POST',",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                content_type: 'text/foo',",
							"                response_body: 'foo content',",
							"                status_code: 202,",
							"            }),",
							"        },",
							"    }, (err, res) => {",
							"        if (err) {",
							"            throw err",
							"        }",
							"",
							"        pm.expect(res.code).to.equal(200)",
							"        pm.collectionVariables.set('webhooksSessionUUID', res.json().uuid)",
							"    });",
							"}",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
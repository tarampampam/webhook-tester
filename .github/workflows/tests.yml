# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
# docs: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

name: ðŸ§ª Tests

on:
  workflow_dispatch: {}
  push:
    branches: [master, main]
    paths-ignore: ['**.md']
    tags-ignore: ['**']
  pull_request:
    paths-ignore: ['**.md']

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  git-leaks:
    name: Check for GitLeaks
    runs-on: ubuntu-latest
    steps:
      - {uses: actions/checkout@v4, with: {fetch-depth: 0}}
      - uses: gacts/gitleaks@v1

  lint-charts:
    name: Lint the chart
    runs-on: ubuntu-latest
    defaults: {run: {working-directory: ./deployments/helm}}
    steps:
      - uses: actions/checkout@v4
      - uses: azure/setup-helm@v4
      - run: helm dependency update .
      - run: helm template . > /dev/null
      - run: helm lint --strict .

  lint-and-test-backend:
    name: Test and lint the backend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - {uses: actions/setup-go@v5, with: {go-version-file: go.mod}}
      - run: go install "github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@v2.4.1"
      - run: go generate -skip readme ./...
      - uses: golangci/golangci-lint-action@v6
      - run: go test -race -covermode=atomic ./...

  lint-and-test-frontend:
    name: Test and lint the frontend
    runs-on: ubuntu-latest
    env: {FORCE_COLOR: 'true', NPM_PREFIX: './web'}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: {node-version-file: ./web/package.json, cache: 'npm', cache-dependency-path: ./web/package-lock.json}
      - run: npm --prefix "$NPM_PREFIX" install -dd --no-audit
      - run: npm --prefix "$NPM_PREFIX" run generate
      - run: npm --prefix "$NPM_PREFIX" run lint
      - run: npm --prefix "$NPM_PREFIX" run test

  build-web:
    name: Build the frontend
    runs-on: ubuntu-latest
    env: {FORCE_COLOR: 'true', NPM_PREFIX: './web'}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: {node-version-file: ./web/package.json, cache: 'npm', cache-dependency-path: ./web/package-lock.json}
      - run: npm --prefix "$NPM_PREFIX" install -dd --no-audit
      - run: npm --prefix "$NPM_PREFIX" run generate
      - run: npm --prefix "$NPM_PREFIX" run build
      - uses: actions/upload-artifact@v4
        with: {name: web-dist, path: ./web/dist/, if-no-files-found: error, retention-days: 1}

  build-app:
    name: Build the app
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: # https://pkg.go.dev/internal/platform
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
    needs: [lint-and-test-backend, lint-and-test-frontend, build-web]
    steps:
      - uses: actions/checkout@v4
      - {uses: gacts/github-slug@v1, id: slug}
      - id: values
        run: |
          echo "app-version=${{ steps.slug.outputs.version-semantic }}@${{ steps.slug.outputs.commit-hash-short }}" >> $GITHUB_OUTPUT
          echo "bin-name=webhook-tester-${{ matrix.os }}-${{ matrix.arch }}`[ ${{ matrix.os }} = 'windows' ] && echo '.exe'`" >> $GITHUB_OUTPUT
      - {uses: actions/setup-go@v5, with: {go-version-file: go.mod}}
      - run: go install "github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@v2.4.1"
      - run: go generate -skip readme ./...
      - {uses: actions/download-artifact@v4, with: {name: web-dist, path: ./web/dist}} # put the built frontend
      - env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          LDFLAGS: -s -w -X gh.tarampamp.am/webhook-tester/v2/internal/version.version=${{ steps.values.outputs.app-version }}
        run: go build -trimpath -ldflags "$LDFLAGS" -o "./${{ steps.values.outputs.bin-name }}" ./cmd/webhook-tester/
      - uses: actions/upload-artifact@v4
        with:
          name: webhook-tester-${{ matrix.os }}-${{ matrix.arch }}
          path: ./${{ steps.values.outputs.bin-name }}
          if-no-files-found: error
          retention-days: 7

  e2e-test:
    name: End-to-end tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        storage-driver: [memory, redis, fs]
        pubsub-driver: [memory, redis]
    services:
      redis:
        image: docker.io/library/redis:7-alpine
        ports: ['6379:6379/tcp']
        options: --health-cmd "redis-cli ping" --health-interval 3s --health-timeout 2s --health-retries 3
    needs: [build-app]
    steps:
      - uses: actions/checkout@v4
      - {uses: actions/download-artifact@v4, with: {name: webhook-tester-linux-amd64}}
      - run: mkdir ./data
      - run: | # start the server in the background
          chmod +x ./webhook-tester-linux-amd64
          ./webhook-tester-linux-amd64 start --port 8081 \
            --storage-driver "${{ matrix.storage-driver }}" \
            --pubsub-driver "${{ matrix.pubsub-driver }}" \
            --fs-storage-dir ./data \
            --redis-dsn "redis://127.0.0.1:6379/0" &
      - uses: grafana/setup-k6-action@v1
      - uses: grafana/run-k6-action@v1
        env: {BASE_URL: 'http://127.0.0.1:8081'}
        with: {path: ./tests/k6/run.js}

  build-docker-image:
    name: Build the docker image
    runs-on: ubuntu-latest
    needs: [lint-and-test-backend, lint-and-test-frontend]
    steps:
      - uses: actions/checkout@v4
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: app:local
